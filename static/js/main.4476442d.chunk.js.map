{"version":3,"sources":["scripts/processData.ts","types/DataType.ts","scripts/fetchRawData.ts","components/IndicatorDropdown.tsx","components/CountryDropdown.tsx","components/AngledTick.tsx","components/CovidChart.tsx","scripts/generateColors.ts","components/AlignedContainer.tsx","components/LoadingSpinner.tsx","components/NoDataMessage.tsx","components/ChartOrLoadingOrMessage.tsx","components/ChartBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["processRecord","record","Do","O","bindL","country","str","parseIndicatorOpt","indicator","undefined","daily_count","date","Date","toString","parseDateOpt","float","parseFloat","parseFloatOpt","rate_14_day","source","return","identity","processData","rawData","A","pipe","getCountryData","data","toLowerCase","filter","rec","getIndicatorData","sortDataByDate","sort","r1","r2","getTime","getSortedCountryList","map","c1","c2","c1l","c2l","reduce","acc","curr","length","CORSedUrl","CORSproxy","fetchRawData","url","a","fetch","then","response","ok","body","json","E","error","catch","reason","status","statusText","options","value","label","IndicatorDropdown","props","this","className","option","values","includes","onChange","selected","v","labelledBy","hasSelectAll","React","CountryDropdown","AngledTick","x","y","payload","transform","dy","textAnchor","fill","angle","PureComponent","StyledTitle","styled","div","CovidChart","formatData","countriesData","countries","flatMap","formattedData","indicators","r","parName","makeEntryName","getDate","getMonth","parameterName","rate14day","i","arr","console","log","ind","formatIndicator","dataEntries","Object","entries","entry","n","colors","hslToHex","Array","from","_","dataColors","color","join","slice","width","height","style","fontSize","stroke","strokeDasharray","dataKey","interval","dx","tick","type","find","val","dot","strokeWidth","Component","LoadingSpinner","AlignedContainer","size","NoDataMessage","ChartOrLoadingOrMessage","loading","DropdownStyles","css","AnotherStyledCountryDropdown","AnotherCountryDropdown","StyledIndicatorDropdown","ChartBlock","changeData","setState","state","countryOptions","chartHeight","StyledApp","StyledHeader","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4476442d.chunk.js","sourcesContent":["import * as O from 'fp-ts/Option'\nimport * as A from 'fp-ts/Array'\nimport { pipe, identity } from 'fp-ts/lib/function'\nimport { Do } from 'fp-ts-contrib/Do'\n\nimport {RawRecordType, RawDataType} from \"../types/RawDataType\"\nimport {RecordType, DataType, parseIndicatorOpt, Indicator} from \"../types/DataType\"\n\nfunction parseDateOpt (str: string | undefined): O.Option<Date> {\n  const date = new Date(str ?? '')\n  switch(date.toString()) {\n    case \"Invalid Date\":\n      return O.none\n    default:\n      return O.some(date)\n  }\n}\n\nfunction parseFloatOpt (str: string | undefined): O.Option<number> {\n  const float = parseFloat(str ?? '')\n  return float ? O.some(float) : O.some(0)\n}\n\nfunction processRecord (record: RawRecordType): O.Option<RecordType> {\n  return Do(O.option)\n    .bindL('country',     () => record.country ? O.some(record.country) : O.none)\n    .bindL('indicator',   () => parseIndicatorOpt(record.indicator))\n    .bindL('dailyCount',  () => record.daily_count !== undefined ? O.some(record.daily_count) : O.some(0))\n    .bindL('date',        () => parseDateOpt(record.date))\n    .bindL('rate14day',   () => parseFloatOpt(record.rate_14_day))\n    .bindL('source',      () => record.source ? O.some(record.source) : O.some(\"no source\"))\n    .return(identity)\n}\n\nexport function processData(rawData: RawDataType): DataType {\n\n  const processed = \n    A.compact(\n      pipe(\n        rawData,\n        A.map(processRecord)\n      )\n    )\n\n  return processed\n}\n\nexport function getCountryData(str: string, data: DataType): DataType {\n  const country = str.toLowerCase()\n  return data\n    .filter(rec => rec.country.toLowerCase() === country)\n}\n\nexport function getIndicatorData(indicator: Indicator, data: DataType): DataType {\n  return data\n    .filter(rec => rec.indicator === indicator)\n}\n\nexport function sortDataByDate(data: DataType): DataType {\n  return data\n    .sort(\n      (r1, r2) => r1.date.getTime() - r2.date.getTime()\n    )\n}\n\nexport function getSortedCountryList(data: DataType): string[] {\n  return data\n    .map(record => record.country)\n    .sort(\n      (c1, c2) => {\n        const c1l = c1.toLowerCase(), c2l = c2.toLowerCase()\n        if (c1l < c2l) return -1\n        if (c1l > c2l) return 1\n        return 0\n      }\n    )\n    .reduce(\n      (acc, curr) => (\n        acc[acc.length - 1] !== curr \n          ? [...acc, curr]\n          : acc\n      ),\n      [] as string[]\n    )\n}","import * as O from 'fp-ts/Option'\n\ntype DeathsIndicator = \"deaths\"\ntype CasesIndicator = \"confirmed cases\"\n\nexport type Indicator = DeathsIndicator | CasesIndicator\n\nexport function parseIndicatorOpt (str: string | undefined): O.Option<Indicator> {\n  switch(str) {\n    case \"deaths\":\n      return O.some(str)\n    case \"confirmed cases\":\n      return O.some(str)\n    default: \n      return O.none\n  }\n}\n\nexport type RecordType = {\n  country: string,\n  indicator: Indicator,\n  dailyCount: number,\n  date: Date,\n  rate14day: number,\n  source: string,\n}\nexport type DataType = RecordType[]","import * as E from 'fp-ts/Either'\n\nimport {RawDataType} from '../types/RawDataType'\n\nconst url = 'https://opendata.ecdc.europa.eu/covid19/nationalcasedeath/json/'\nconst CORSproxy = 'https://cors-anywhere.herokuapp.com/'\nconst CORSedUrl = CORSproxy + url\n\ntype JsonError = {\n  error: string\n}\n\nexport default async function fetchRawData (url?: string): Promise<E.Either<JsonError, RawDataType>> {\n  return fetch(url ?? CORSedUrl)\n    .then(\n      async response => response.ok\n        ? response.body \n          ? await response.json()\n            .then(\n              json => json \n                ? E.right(json as RawDataType)\n                : E.left({error: 'json is empty'})\n            )\n            .catch(\n              reason =>\n                E.left({error: 'json cannot be parsed, reason: ' + reason})\n            ) \n          : E.left({error: 'body is empty'})\n        : E.left({\n          error: `http response was not ok, it was: ${response.status} ${response.statusText}`\n        })\n    )\n    .catch(\n      reason => E.left({error: `network problem: ${reason}`})\n    )\n}","import * as React from 'react'\nimport MultiSelect from \"react-multi-select-component\"\n\nimport {Indicator} from '../types/DataType'\n\ntype OptionType = {\n  value: Indicator\n  label: string\n}\n\ntype IndicatorDropdownProps = {\n  className?: string\n  values: Indicator[]\n\n  onChange: (indicator: Indicator[]) => void\n}\n\nconst options: OptionType[] = [\n  { value: 'confirmed cases', label: 'Confirmed cases' },\n  { value: 'deaths', label: 'Deaths' }\n]\n \nexport default class IndicatorDropdown extends React.Component<IndicatorDropdownProps> {\n\n  render() { \n    const props = this.props\n\n    return (\n      <MultiSelect \n        className={props.className} \n        value={options.filter(option => props.values.includes(option.value))} \n        options={options} \n        onChange={(selected: OptionType[]) => props.onChange(selected.map(v => v.value))} \n        labelledBy=\"Select indicator\"\n        hasSelectAll={false}\n      />\n    )\n  }\n}","import * as React from 'react'\nimport MultiSelect from \"react-multi-select-component\"\n\nexport type OptionType = {\n  value: string\n  label: string\n}\n\ninterface CountryDropdownProps  {\n  className?: string\n  values: string[]\n  options: OptionType[]\n\n  onChange: (country: string[]) => void\n}\n \nexport default class CountryDropdown extends React.Component<CountryDropdownProps> {\n\n\n  render() { \n    const props = this.props\n\n    return (\n      <MultiSelect \n        className={props.className} \n        value={props.options.filter(option => props.values.includes(option.value))} \n        options={props.options} \n        onChange={(selected: OptionType[]) => props.onChange(selected.map(v => v.value))} \n        labelledBy=\"Select country\"\n        hasSelectAll={false}\n      />\n    )\n  }\n}\n ","import React from 'react'\n\nexport default class AngledTick extends React.PureComponent<any> {\n    render() {\n      const {\n        x, y, payload,\n      } = this.props;\n  \n      return (\n        <g transform={`translate(${x},${y})`}>\n          <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform={`rotate(${this.props.angle})`}>{payload.value}</text>\n        </g>\n      );\n    }\n  }","import React from 'react'\nimport {LineChart, XAxis, YAxis, CartesianGrid, Line, ResponsiveContainer, Legend} from 'recharts'\n\nimport AngledTick from './AngledTick'\nimport {DataType, Indicator} from '../types/DataType'\nimport {getCountryData, getIndicatorData, sortDataByDate} from '../scripts/processData'\nimport generateHexColors from '../scripts/generateColors'\nimport styled from 'styled-components'\n\ntype CovidChartProps = {\n  data: DataType\n  countries: string[]\n  indicators: Indicator[]\n  height: number\n}\n\ntype ChartRecord = {\n  date: string\n  parameterName: string\n  [key: string]: any\n}\n\nconst StyledTitle = styled.div`\n  padding: 1em;\n  \n  :first-letter {\n    text-transform: capitalize;  \n  }\n`\n\nexport default class CovidChart extends React.Component <CovidChartProps> {\n  \n  // making cringe data format to satisfy rechart\n  formatData = (props: CovidChartProps): ChartRecord[] => {\n    // TODO: optimise\n    const countriesData = props.countries.flatMap(\n      country =>\n        getCountryData(country, props.data)\n    )\n\n    const indicatorData = props.indicators.flatMap(\n      indicator => \n        getIndicatorData(indicator, countriesData)\n    )\n\n    // data that is sorted by date and has a property with dynamic name\n    const sortedNamedData: ChartRecord[] = sortDataByDate(indicatorData).map(\n      r => {\n        const parName = this.makeEntryName(r.country, r.indicator)\n        return {\n          date: r.date.getDate() + \".\" + (r.date.getMonth() + 1), \n          parameterName: parName,\n          [parName]: r.rate14day\n        }\n      }\n    )\n\n    // data that is formatted in a chart-friendly format where dynamic properties\n    // from sortedNameData are grouped by date\n    const formattedData: ChartRecord[] = sortedNamedData.reduce(\n      (acc, curr, i, arr) => {\n        if (arr[i - 1]?.date === curr.date) {\n          acc[acc.length - 1][curr.parameterName] = curr[curr.parameterName]\n          return acc\n        } else {\n          return [...acc, curr]\n        }\n      },\n      [] as ChartRecord[]\n    )\n\n    console.log(\"datasets:\", props.countries, \", \", props.indicators, \": \", formattedData)\n\n    return formattedData\n  }\n  \n  makeEntryName (country: string, indicator: Indicator): string {\n    const formatIndicator = (ind: Indicator) => {\n      switch (ind) {\n        case 'confirmed cases':\n          return 'cc'\n        case 'deaths':\n          return 'd'\n      }\n    }\n\n    return `${country}, ${formatIndicator(indicator)}`\n  }\n\n  render() {\n    const props = this.props\n    \n    const formattedData = this.formatData(props)\n\n    const dataEntries = Object\n      .entries(formattedData[0])\n      .filter(\n        ([entry, _]) => entry !== 'date' && entry !== 'parameterName'\n      )\n\n    console.log(\"props: \", props, \", formatted data: \", formattedData)\n\n    const colors = generateHexColors(dataEntries.length)\n    console.log(\"colors:\", colors)\n\n    const dataColors = dataEntries.map(\n      ([entry, _], i) => ({\n        entry: entry,\n        color: colors[i]\n      })\n    )\n\n    console.log('data colors:', dataColors)\n\n    return (\n      <div>\n        <StyledTitle>\n          {props.indicators.join(' and ')} in {\n            props.countries\n              .slice(0, props.countries.length - 1)\n              .join(', ')\n          }{props.countries.length > 1 ? ' and ' : ''} \n          {props.countries[props.countries.length - 1]}, 14 day cumulative\n        </StyledTitle>\n\n        <ResponsiveContainer width=\"100%\" height={props.height}>\n          <LineChart style={{fontSize: 20}} data={formattedData}>\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"date\" interval={30} dx={10} height={40} tick={<AngledTick angle={-35} />} />\n            <YAxis />\n            <Legend />\n\n            {\n              props.countries.flatMap(\n                country => props.indicators.map(\n                  indicator => \n                    <Line \n                      key={this.makeEntryName(country, indicator)} \n                      type=\"monotone\" \n                      dataKey={this.makeEntryName(country, indicator)} \n                      stroke={dataColors.find(val => val.entry === this.makeEntryName(country, indicator))?.color ?? '#000000'} \n                      dot={false} \n                      strokeWidth={3} />\n                )\n              )\n            }\n            \n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  }\n}","import hslToHex from 'hsl-to-hex'\n\nexport default function generateHexColors (n: number): string[] {\n  console.log(hslToHex(0, 100, 50))\n  return Array.from(\n    new Array(n), \n    (_, i) =>\n      hslToHex((360 / n) * i, 100, 50)\n  )\n}","import styled from 'styled-components'\n\ntype AlignedContainerProps = {\n  height: number\n}\n\nexport default styled.div<AlignedContainerProps>`\n  width: fit-content;\n  height: ${props => props.height}px;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`","import React from 'react'\nimport PulseLoader from 'react-spinners/PulseLoader'\n\nimport AlignedContainer from './AlignedContainer'\n\ntype LoadingSpinnerProps = {\n  height: number\n}\n \nexport default class LoadingSpinner extends React.Component<LoadingSpinnerProps> {\n  render() { \n    const props = this.props\n    return (\n      <AlignedContainer height={props.height}>\n        <PulseLoader size='2em' />\n      </AlignedContainer>\n    );\n  }\n}","import React from 'react'\nimport { Indicator } from '../types/DataType';\n\nimport AlignedContainer from './AlignedContainer'\n\ntype NoDataMessageProps = {\n  height: number\n  countries?: string[]\n  indicators?: Indicator[]\n}\n \nexport default class NoDataMessage extends React.Component<NoDataMessageProps> {\n  render() { \n    const props = this.props\n    return (\n      <AlignedContainer height={props.height}>\n        {\n          (props.countries && props.countries.length !== 0 && props.indicators && props.indicators.length !== 0)\n            ? `No data to show for ${props.indicators.join(', ')} in ${props.countries.join(', ')}`\n            : 'No data to show'\n\n        }\n      </AlignedContainer>\n    );\n  }\n}","import * as React from 'react'\n\nimport { DataType, Indicator } from '../types/DataType';\nimport CovidChart from './CovidChart';\nimport LoadingSpinner from './LoadingSpinner';\nimport NoDataMessage from './NoDataMessage';\n\ntype ChartOrLoadingOrMessageProps = {\n  data?: DataType\n  countries?: string[]\n  indicators: Indicator[]\n  height: number\n  loading: boolean\n}\n\nexport default class ChartOrLoadingOrMessage extends React.Component<ChartOrLoadingOrMessageProps> {\n\n  render() { \n    const props = this.props\n    return (\n      props.loading\n        ? <LoadingSpinner height={props.height} />\n        : (\n          props.data \n          && props.countries \n          && props.countries?.length !== 0 \n          && props.indicators \n          && props.indicators?.length !== 0\n        ) ? <CovidChart height={props.height} data={props.data} countries={props.countries} indicators={props.indicators} />\n          : <NoDataMessage height={props.height} countries={props.countries} indicators={props.indicators} />\n    )\n  }\n}","import * as React from 'react'\nimport * as E from 'fp-ts/Either'\nimport {pipe} from 'fp-ts/function'\nimport styled, { css } from 'styled-components'\n\nimport {getSortedCountryList, processData} from '../scripts/processData'\nimport fetchRawData from '../scripts/fetchRawData'\nimport {DataType, Indicator} from '../types/DataType'\nimport IndicatorDropdown from './IndicatorDropdown'\nimport AnotherCountryDropdown, {OptionType as CountryOptionType} from './CountryDropdown'\nimport ChartOrLoadingOrMessage from './ChartOrLoadingOrMessage'\n\nconst DropdownStyles = css`\n  padding: 0.5em;\n  margin-bottom: 0.5em;\n  font-size: 1em;\n  width: 100%;\n  border-radius: 0.5em;\n  appearance: none;\n  background-image: url(down-arrow.jpg) no-repeat right;\n`\n\nconst AnotherStyledCountryDropdown = styled(AnotherCountryDropdown)`\n  ${DropdownStyles}\n`\n\nconst StyledIndicatorDropdown = styled(IndicatorDropdown)`\n  ${DropdownStyles}\n`\n\ntype ChartBlockProps = {\n  chartHeight: number\n}\n \ntype ChartBlockState = {\n  data?: DataType\n  countries?: string[]\n  indicators: Indicator[]\n\n  countryOptions: CountryOptionType[]\n\n  loading: boolean\n}\n \nexport default class ChartBlock extends React.Component<ChartBlockProps, ChartBlockState> {\n  changeData = (data?: DataType, countries?: string[], indicators?: Indicator[]) => \n    this.setState({\n      data: data ?? this.state.data, \n      countries: countries ?? this.state.countries, \n      indicators: indicators ?? this.state.indicators, \n      countryOptions: this.state.countryOptions \n        ? getSortedCountryList(data ?? [])\n          .map(\n            country => ({\n              value: country,\n              label: country\n            })\n          )\n        : [],\n      loading: false\n    })\n\n  constructor(props: ChartBlockProps) {\n    super(props)\n    this.state = {loading: false, indicators: [], countryOptions: []}\n  }\n\n  componentDidMount() {\n    // fetching data from server\n    (async () => {\n      this.setState({loading: true})\n      const rawData = await fetchRawData()\n      console.log('rawData: ', rawData)\n      pipe(\n        rawData,\n        E.fold(\n          error   => console.log('error: ', error.error),\n          rawData => this.changeData(processData(rawData))\n        )\n      )\n    })()\n  }\n\n  render() { \n    const state = this.state\n    const props = this.props\n\n    console.log(getSortedCountryList(state.data ?? []), state.countries, state.countryOptions)\n\n    return ( \n      <div>\n\n        <AnotherStyledCountryDropdown \n          values={state.countries ?? []}\n          options={state.countryOptions}\n          onChange={\n            (countries: string[]) =>\n              this.changeData(state.data, countries, state.indicators)\n          }\n        />\n\n        <StyledIndicatorDropdown \n          values={state.indicators} \n          onChange={ \n            (indicators: Indicator[]) => \n              this.changeData(state.data, state.countries, indicators) \n          } \n        />\n\n        <ChartOrLoadingOrMessage \n          height={props.chartHeight} \n          loading={state.loading} \n          data={state.data} \n          countries={state.countries} \n          indicators={state.indicators} \n        />\n      </div>\n      \n    )\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport ChartBlock from './components/ChartBlock'\n\nconst StyledApp = styled.div`\n  text-align: left;\n  background-color: #ffffff;\n  min-height: 95vh;\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  justify-content: flex-start;\n  font-size: calc(10px + 2vmin);\n  color: rgb(39, 39, 39);\n  padding: 5%;\n`\n\nconst StyledHeader = styled.header`\n  font-size: 2em;\n  margin-bottom: 0.5em;\n`\n\nfunction App() {\n  return (\n    <StyledApp>\n      <StyledHeader>\n        Super cool app description\n      </StyledHeader>\n      <ChartBlock chartHeight={500} />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
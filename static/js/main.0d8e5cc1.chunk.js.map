{"version":3,"sources":["scripts/processData.ts","types/DataType.ts","scripts/fetchRawData.ts","components/MultiSelectDropdown.tsx","components/IndicatorDropdown.tsx","components/CountryDropdown.tsx","components/AngledTick.tsx","components/ChartTitle.tsx","components/CovidChart.tsx","scripts/generateColors.ts","components/AlignedContainer.tsx","components/LoadingSpinner.tsx","components/NoDataMessage.tsx","components/ErrorMessage.tsx","components/ChartOrLoadingOrMessage.tsx","components/ChartBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["processRecord","record","Do","O","bindL","country","str","parseIndicatorOpt","indicator","undefined","daily_count","year_week","float","parseFloat","parseFloatOpt","rate_14_day","source","return","identity","processData","rawData","A","pipe","getCountryData","data","toLowerCase","filter","rec","getIndicatorData","sortDataByDate","sort","r1","r2","getSortedCountryList","map","c1","c2","c1l","c2l","reduce","acc","curr","length","CORSedUrl","CORSproxy","fetchRawData","url","a","fetch","then","response","ok","body","json","E","error","catch","reason","status","statusText","StyledTitle","styled","div","StyledMultiSelect","MultiSelect","MultiSelectDropdown","props","this","className","title","value","options","option","values","includes","onChange","selected","v","labelledBy","hasSelectAll","React","label","IndicatorDropdown","CountryDropdown","AngledTick","x","y","payload","transform","initMargin","dy","textAnchor","fill","angle","PureComponent","StyledChartTitle","HighlightedText","span","color","countriesColor","ChartTitle","strings","delimiter","ind","prev","chainElements","indicators","countries","slice","StyledContainer","CovidChart","formatData","countriesData","flatMap","sortedNamedData","r","parName","makeEntryName","date","parameterName","rate14day","console","log","formattedData","i","arr","formatIndicator","dataEntries","Object","entries","entry","n","colors","hslToHex","Array","from","_","dataColors","width","height","style","fontSize","stroke","strokeDasharray","dataKey","interval","Math","ceil","window","innerWidth","dx","tick","type","find","val","dot","strokeWidth","Component","LoadingSpinner","AlignedContainer","size","NoDataMessage","join","StyledButton","button","StyledError","ErrorMessage","children","onClick","onRetry","ChartOrLoadingOrMessage","loading","DropdownStyles","css","StyledCountryDropdown","StyledIndicatorDropdown","ChartBlock","changeData","setState","state","countryOptions","raiseError","fetchDataOrRaiseError","chartHeight","StyledApp","StyledHeader","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d8e5cc1.chunk.js","sourcesContent":["import * as O from 'fp-ts/Option'\nimport * as A from 'fp-ts/Array'\nimport { pipe, identity } from 'fp-ts/lib/function'\nimport { Do } from 'fp-ts-contrib/Do'\n\nimport {RawRecordType, RawDataType} from \"../types/RawDataType\"\nimport {RecordType, DataType, parseIndicatorOpt, Indicator} from \"../types/DataType\"\n\nfunction parseFloatOpt (str: string | undefined): O.Option<number> {\n  const float = parseFloat(str ?? '')\n  return float ? O.some(float) : O.some(0)\n}\n\nfunction processRecord (record: RawRecordType): O.Option<RecordType> {\n  return Do(O.option)\n    .bindL('country',     () => record.country ? O.some(record.country) : O.none)\n    .bindL('indicator',   () => parseIndicatorOpt(record.indicator))\n    .bindL('dailyCount',  () => record.daily_count !== undefined ? O.some(record.daily_count) : O.some(0))\n    .bindL('year_week',   () => record.year_week ? O.some(record.year_week) : O.none)\n    .bindL('rate14day',   () => parseFloatOpt(record.rate_14_day))\n    .bindL('source',      () => record.source ? O.some(record.source) : O.some(\"no source\"))\n    .return(identity)\n}\n\nexport function processData(rawData: RawDataType): DataType {\n\n  const processed = \n    A.compact(\n      pipe(\n        rawData,\n        A.map(processRecord)\n      )\n    )\n\n  return processed\n}\n\nexport function getCountryData(str: string, data: DataType): DataType {\n  const country = str.toLowerCase()\n  return data\n    .filter(rec => rec.country.toLowerCase() === country)\n}\n\nexport function getIndicatorData(indicator: Indicator, data: DataType): DataType {\n  return data\n    .filter(rec => rec.indicator === indicator)\n}\n\nexport function sortDataByDate(data: DataType): DataType {\n  return data\n    .sort(\n      (r1, r2) => (r1.year_week > r2.year_week) ? 1 : -1\n    )\n}\n\nexport function getSortedCountryList(data: DataType): string[] {\n  return data\n    .map(record => record.country)\n    .sort(\n      (c1, c2) => {\n        const c1l = c1.toLowerCase(), c2l = c2.toLowerCase()\n        if (c1l < c2l) return -1\n        if (c1l > c2l) return 1\n        return 0\n      }\n    )\n    .reduce(\n      (acc, curr) => (\n        acc[acc.length - 1] !== curr \n          ? [...acc, curr]\n          : acc\n      ),\n      [] as string[]\n    )\n}","import * as O from 'fp-ts/Option'\n\ntype DeathsIndicator = \"deaths\"\ntype CasesIndicator = \"cases\"\n\nexport type Indicator = DeathsIndicator | CasesIndicator\n\nexport function parseIndicatorOpt (str: string | undefined): O.Option<Indicator> {\n  switch(str) {\n    case \"deaths\":\n      return O.some(str)\n    case \"cases\":\n      return O.some(str)\n    default: \n      return O.none\n  }\n}\n\nexport type RecordType = {\n  country: string,\n  indicator: Indicator,\n  dailyCount: number,\n  year_week: string,\n  rate14day: number,\n  source: string,\n}\nexport type DataType = RecordType[]","import * as E from 'fp-ts/Either'\n\nimport {RawDataType} from '../types/RawDataType'\n\nconst url = 'https://opendata.ecdc.europa.eu/covid19/nationalcasedeath/json/'\nconst CORSproxy = 'https://cors-anywhere.herokuapp.com/'\nconst CORSedUrl = CORSproxy + url\n\ntype JsonError = {\n  error: string\n}\n\nexport default async function fetchRawData (url?: string): Promise<E.Either<JsonError, RawDataType>> {\n  return fetch(url ?? CORSedUrl)\n    .then(\n      async response => response.ok\n        ? response.body \n          ? await response.json()\n            .then(\n              json => json \n                ? E.right(json as RawDataType)\n                : E.left({error: 'json is empty'})\n            )\n            .catch(\n              reason =>\n                E.left({error: 'json cannot be parsed, reason: ' + reason})\n            ) \n          : E.left({error: 'body is empty'})\n        : E.left({\n          error: `http response was not ok, it was: ${response.status} ${response.statusText}`\n        })\n    )\n    .catch(\n      reason => E.left({error: `network problem: ${reason}`})\n    )\n}","import * as React from 'react'\nimport MultiSelect from \"react-multi-select-component\"\nimport styled from 'styled-components'\n\nexport type OptionType = {\n  value: string\n  label: string\n}\n\ninterface MultiSelectDropdownProps  {\n  className?: string\n  values: string[]\n  options: OptionType[]\n  title: string\n\n  onChange: (country: string[]) => void\n}\n \nconst StyledTitle = styled.div`\n  padding-bottom: 0.5em;\n`\n\nconst StyledMultiSelect = styled(MultiSelect)`\n  --rmsc-radius: 15px;\n  --rmsc-p: 0.5em;\n  --rmsc-h: 1.75em;\n\n  div, div div, div div span {\n    transition: none !important;\n  }\n`\n\nexport default class MultiSelectDropdown extends React.Component<MultiSelectDropdownProps> {\n\n\n  render() { \n    const props = this.props\n\n    return (\n      <div className={props.className}>\n        <StyledTitle>\n          {props.title}\n        </StyledTitle>\n        <StyledMultiSelect \n          value={props.options.filter(option => props.values.includes(option.value))} \n          options={props.options} \n          onChange={(selected: OptionType[]) => props.onChange(selected.map(v => v.value))} \n          labelledBy=\"Select country\"\n          hasSelectAll={false}\n        />\n      </div>\n    )\n  }\n}\n ","import * as React from 'react'\n\nimport {Indicator} from '../types/DataType'\nimport MultiSelectDropdown from './MultiSelectDropdown'\n\ntype OptionType = {\n  value: Indicator\n  label: string\n}\n\ntype IndicatorDropdownProps = {\n  className?: string\n  values: Indicator[]\n\n  onChange: (indicator: Indicator[]) => void\n}\n\nconst options: OptionType[] = [\n  { value: 'cases', label: 'Confirmed cases' },\n  { value: 'deaths', label: 'Deaths' }\n]\n \nexport default class IndicatorDropdown extends React.Component<IndicatorDropdownProps> {\n\n  render() { \n    const props = this.props\n\n    return (\n      <MultiSelectDropdown \n        className={props.className}\n        title=\"💀 Indicators\"\n        values={props.values}\n        options={options}\n        onChange={props.onChange as (indicator: string[]) => void}\n      />\n    )\n  }\n}","import * as React from 'react'\n\nimport MultiSelectDropdown from './MultiSelectDropdown'\n\nexport type OptionType = {\n  value: string\n  label: string\n}\n\ninterface CountryDropdownProps  {\n  className?: string\n  values: string[]\n  options: OptionType[]\n\n  onChange: (country: string[]) => void\n}\n\nexport default class CountryDropdown extends React.Component<CountryDropdownProps> {\n\n  render() { \n    const props = this.props\n\n    return (\n      <MultiSelectDropdown \n        className={props.className}\n        title=\"🌍 Countries\"\n        values={props.values}\n        options={props.options}\n        onChange={props.onChange}\n      />\n    )\n  }\n}\n ","import React from 'react'\n\ntype AngledTickProps = {\n  x?: number\n  y?: number\n  payload?: any\n\n  angle: number\n  initMargin?: number\n}\n\nexport default class AngledTick extends React.PureComponent<AngledTickProps> {\n    render() {\n      const {\n        x, y, payload,\n      } = this.props;\n  \n      return (\n        <g transform={`translate(${(x ?? 0) + (this.props.initMargin ?? 0)},${y})`}>\n          <text \n            x={0} \n            y={0} \n            dy={16} \n            textAnchor=\"end\" \n            fill=\"#666\" \n            transform={`rotate(${this.props.angle})`}\n          >\n            {payload.value}\n          </text>\n        </g>\n      );\n    }\n  }","import * as React from 'react'\nimport styled from 'styled-components'\n\nimport { Indicator } from '../types/DataType'\n\ntype ChartTitleProps = {\n  countries: string[]\n  indicators: Indicator[]\n}\n\nconst StyledChartTitle = styled.div`\n  padding: 1em;\n  text-align: center;\n  \n  :first-letter {\n    text-transform: capitalize;  \n  }\n`\n\nconst HighlightedText = styled.span<{color: string}>`\n  background-color: ${props => props.color};\n`\n\nconst indicatorsColor = '#fff1b5'\nconst countriesColor = '#e4ffbb'\n\nexport default class ChartTitle extends React.Component<ChartTitleProps> {\n\n  chainElements (strings: string[], delimiter: string, color: string): React.ReactNode {\n    return strings.length !== 0\n      ? strings\n          .map<React.ReactNode>(ind => <HighlightedText color={color}>{ind}</HighlightedText>)\n          .reduce((prev, curr) => [prev, delimiter, curr])\n      : undefined\n  }\n\n  render() { \n    const props = this.props\n\n    return (\n      <StyledChartTitle>\n          {\n            this.chainElements(props.indicators, ' and ', indicatorsColor)\n          } in {\n            this.chainElements(props.countries.slice(0, props.countries.length - 1), ', ', countriesColor)\n          }\n          \n          {props.countries.length > 1 ? ' and ' : ''} \n\n          <HighlightedText color={countriesColor}>\n            {props.countries[props.countries.length - 1]}\n          </HighlightedText>\n          \n          , 14 day cumulative per 100 000\n      </StyledChartTitle>\n    )\n  }\n}","import React from 'react'\nimport {LineChart, XAxis, YAxis, CartesianGrid, Line, ResponsiveContainer, Legend} from 'recharts'\nimport styled from 'styled-components'\n\nimport AngledTick from './AngledTick'\nimport {DataType, Indicator} from '../types/DataType'\nimport {getCountryData, getIndicatorData, sortDataByDate} from '../scripts/processData'\nimport generateHexColors from '../scripts/generateColors'\nimport ChartTitle from './ChartTitle'\n\nconst StyledContainer = styled.div`\n  width: 100%;\n`\n\ntype CovidChartProps = {\n  data: DataType\n  countries: string[]\n  indicators: Indicator[]\n  height: number\n}\n\ntype ChartRecord = {\n  date: string\n  parameterName: string\n  [key: string]: any\n}\n\nexport default class CovidChart extends React.Component <CovidChartProps> {\n  \n  // making cringe data format to satisfy rechart\n  formatData = (props: CovidChartProps): ChartRecord[] => {\n    // TODO: optimise\n    const countriesData = props.countries.flatMap(\n      country =>\n        getCountryData(country, props.data)\n    )\n\n    const indicatorData = props.indicators.flatMap(\n      indicator => \n        getIndicatorData(indicator, countriesData)\n    )\n\n    // data that is sorted by date and has a property with dynamic name\n    const sortedNamedData: ChartRecord[] = sortDataByDate(indicatorData).map(\n      r => {\n        const parName = this.makeEntryName(r.country, r.indicator)\n        return {\n          date: r.year_week,\n          parameterName: parName,\n          [parName]: r.rate14day\n        }\n      }\n    )\n\n    console.log(\"kekkkk\")\n\n    // data that is formatted in a chart-friendly format where dynamic properties\n    // from sortedNameData are grouped by date\n    const formattedData: ChartRecord[] = sortedNamedData.reduce(\n      (acc, curr, i, arr) => {\n        if (arr[i - 1]?.date === curr.date) {\n          acc[acc.length - 1][curr.parameterName] = curr[curr.parameterName]\n          return acc\n        } else {\n          return [...acc, curr]\n        }\n      },\n      [] as ChartRecord[]\n    )\n\n    console.log(\"datasets:\", props.countries, \", \", props.indicators, \": \", formattedData)\n\n    return formattedData\n  }\n  \n  makeEntryName (country: string, indicator: Indicator): string {\n    const formatIndicator = (ind: Indicator) => {\n      switch (ind) {\n        case 'cases':\n          return 'cc'\n        case 'deaths':\n          return 'd'\n      }\n    }\n\n    return `${country}, ${formatIndicator(indicator)}`\n  }\n\n  render() {\n    const props = this.props\n    \n    const formattedData = this.formatData(props)\n\n    const dataEntries = Object\n      .entries(formattedData[0])\n      .filter(\n        ([entry, _]) => entry !== 'date' && entry !== 'parameterName'\n      )\n\n    console.log(\"props: \", props, \", formatted data: \", formattedData)\n\n    const colors = generateHexColors(dataEntries.length)\n    console.log(\"colors:\", colors)\n\n    const dataColors = dataEntries.map(\n      ([entry, _], i) => ({\n        entry: entry,\n        color: colors[i]\n      })\n    )\n\n    console.log('data colors:', dataColors)\n\n    return (\n      <StyledContainer>\n        <ChartTitle \n          countries={props.countries} \n          indicators={props.indicators} \n        />\n\n        <ResponsiveContainer width=\"100%\" height={props.height}>\n          <LineChart style={{fontSize: 20}} data={formattedData}>\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"date\" interval={Math.ceil(1200 / window.innerWidth) - 1} dx={10} height={90} tick={<AngledTick angle={-70} initMargin={-14} />} />\n            <YAxis width={35}/>\n            <Legend />\n\n            {\n              props.countries.flatMap(\n                country => props.indicators.map(\n                  indicator => \n                    <Line \n                      key={this.makeEntryName(country, indicator)} \n                      type=\"monotone\" \n                      dataKey={this.makeEntryName(country, indicator)} \n                      stroke={dataColors.find(val => val.entry === this.makeEntryName(country, indicator))?.color ?? '#000000'} \n                      dot={false} \n                      strokeWidth={3} \n                    />\n                )\n              )\n            }\n            \n          </LineChart>\n        </ResponsiveContainer>\n      </StyledContainer>\n    )\n  }\n}","import hslToHex from 'hsl-to-hex'\n\nexport default function generateHexColors (n: number): string[] {\n  console.log(hslToHex(0, 100, 50))\n  return Array.from(\n    new Array(n), \n    (_, i) =>\n      hslToHex((360 / n) * i, 100, 50)\n  )\n}","import styled from 'styled-components'\n\ntype AlignedContainerProps = {\n  height: number\n}\n\nexport default styled.div<AlignedContainerProps>`\n  width: fit-content;\n  height: ${props => props.height}px;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n`","import React from 'react'\nimport PulseLoader from 'react-spinners/PulseLoader'\n\nimport AlignedContainer from './AlignedContainer'\n\ntype LoadingSpinnerProps = {\n  height: number\n}\n \nexport default class LoadingSpinner extends React.Component<LoadingSpinnerProps> {\n  render() { \n    const props = this.props\n    return (\n      <AlignedContainer height={props.height}>\n        <PulseLoader size='2em' />\n        Loading data, please stand by\n      </AlignedContainer>\n    );\n  }\n}","import React from 'react'\nimport { Indicator } from '../types/DataType';\n\nimport AlignedContainer from './AlignedContainer'\n\ntype NoDataMessageProps = {\n  height: number\n  countries?: string[]\n  indicators?: Indicator[]\n}\n \nexport default class NoDataMessage extends React.Component<NoDataMessageProps> {\n  render() { \n    const props = this.props\n    return (\n      <AlignedContainer height={props.height}>\n        {\n          (props.countries && props.countries.length !== 0 && props.indicators && props.indicators.length !== 0)\n            ? `No data to show for ${props.indicators.join(', ')} in ${props.countries.join(', ')}. The data may be corrupted.`\n            : 'No data to show. Please, select some options above.'\n\n        }\n      </AlignedContainer>\n    );\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport AlignedContainer from './AlignedContainer'\n\nconst StyledButton = styled.button`\n  --button-color: #5353ff;\n\n  font-size: 1em;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid var(--button-color);\n  color: var(--button-color);\n  margin-top: 1em;\n  padding: 0.75em;\n`\n\nconst StyledError = styled.span`\n  color: #ff0000;\n  padding: 0.25em;\n`\n\nexport default function ErrorMessage(\n  props: {\n    height: number\n    children: string\n    onRetry: () => void\n  }\n) {\n  return (\n    <AlignedContainer height={props.height}>\n      Data fetching resolved into this error:\n      <StyledError>\n        {props.children}\n      </StyledError>\n      <StyledButton onClick={props.onRetry}>\n        Try again\n      </StyledButton>\n    </AlignedContainer>\n  )\n}","import * as React from 'react'\n\nimport { DataType, Indicator } from '../types/DataType'\nimport CovidChart from './CovidChart'\nimport LoadingSpinner from './LoadingSpinner'\nimport NoDataMessage from './NoDataMessage'\nimport ErrorMessage from './ErrorMessage'\n\ntype ChartOrLoadingOrMessageProps = {\n  data?: DataType\n  countries?: string[]\n  indicators: Indicator[]\n  height: number\n\n  loading: boolean\n  error?: string\n  onRetry: () => void\n}\n\nexport default class ChartOrLoadingOrMessage extends React.Component<ChartOrLoadingOrMessageProps> {\n\n  render() { \n    const props = this.props\n    return (\n      props.loading\n        ? <LoadingSpinner height={props.height} />\n        : props.error\n          ? <ErrorMessage onRetry={props.onRetry} height={props.height}>{props.error}</ErrorMessage>\n          : (\n            props.data \n            && props.countries \n            && props.countries?.length !== 0 \n            && props.indicators \n            && props.indicators?.length !== 0\n          ) ? <CovidChart height={props.height} data={props.data} countries={props.countries} indicators={props.indicators} />\n            : <NoDataMessage height={props.height} countries={props.countries} indicators={props.indicators} />\n    )\n  }\n}","import * as React from 'react'\nimport * as E from 'fp-ts/Either'\nimport {pipe} from 'fp-ts/function'\nimport styled, { css } from 'styled-components'\n\nimport {getSortedCountryList, processData} from '../scripts/processData'\nimport fetchRawData from '../scripts/fetchRawData'\nimport {DataType, Indicator} from '../types/DataType'\nimport IndicatorDropdown from './IndicatorDropdown'\nimport CountryDropdown, {OptionType as CountryOptionType} from './CountryDropdown'\nimport ChartOrLoadingOrMessage from './ChartOrLoadingOrMessage'\n\nconst DropdownStyles = css`\n  padding: 0.25em;\n  padding-left: 0.75em;\n  font-size: 1em;\n  width: 20em;\n  max-width: 95%;\n`\n\nconst StyledCountryDropdown = styled(CountryDropdown)`\n  ${DropdownStyles}\n`\n\nconst StyledIndicatorDropdown = styled(IndicatorDropdown)`\n  ${DropdownStyles}\n`\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ntype ChartBlockProps = {\n  chartHeight: number\n}\n \ntype ChartBlockState = {\n  data?: DataType\n  countries?: string[]\n  indicators: Indicator[]\n\n  countryOptions: CountryOptionType[]\n\n  loading: boolean\n  error?: string\n}\n \nexport default class ChartBlock extends React.Component<ChartBlockProps, ChartBlockState> {\n  changeData = (data?: DataType, countries?: string[], indicators?: Indicator[]) => \n    this.setState({\n      data: data ?? this.state.data, \n      countries: countries ?? this.state.countries, \n      indicators: indicators ?? this.state.indicators, \n      countryOptions: this.state.countryOptions \n        ? getSortedCountryList(data ?? [])\n          .map(\n            country => ({\n              value: country,\n              label: country\n            })\n          )\n        : [],\n      loading: false\n    })\n\n  raiseError = (error: string) =>\n    this.setState({\n      loading: false,\n      error: error\n    })\n\n  fetchDataOrRaiseError = async () => {\n    this.setState({loading: true})\n    const rawData = await fetchRawData()\n    console.log('rawData: ', rawData)\n    pipe(\n      rawData,\n      E.fold(\n        error   => {\n          console.log('error: ', error.error)\n          this.raiseError(error.error)\n        },\n        rawData => this.changeData(processData(rawData))\n      )\n    )\n  }\n\n  constructor(props: ChartBlockProps) {\n    super(props)\n    this.state = {loading: false, indicators: [], countryOptions: []}\n  }\n\n  componentDidMount() {\n    // fetching data from server\n    this.fetchDataOrRaiseError()\n  }\n\n  render() { \n    const state = this.state\n    const props = this.props\n\n    console.log(getSortedCountryList(state.data ?? []), state.countries, state.countryOptions)\n\n    return ( \n      <StyledContainer>\n\n        <StyledCountryDropdown \n          values={state.countries ?? []}\n          options={state.countryOptions}\n          onChange={\n            (countries: string[]) =>\n              this.changeData(state.data, countries, state.indicators)\n          }\n        />\n\n        <StyledIndicatorDropdown \n          values={state.indicators} \n          onChange={ \n            (indicators: Indicator[]) => \n              this.changeData(state.data, state.countries, indicators) \n          } \n        />\n\n        <ChartOrLoadingOrMessage \n          height={props.chartHeight} \n          loading={state.loading} \n          data={state.data} \n          countries={state.countries} \n          indicators={state.indicators} \n          error={state.error}\n          onRetry={this.fetchDataOrRaiseError}\n        />\n      </StyledContainer>\n      \n    )\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport ChartBlock from './components/ChartBlock'\n\nconst StyledApp = styled.div`\n  text-align: left;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  justify-content: flex-start;\n  font-size: calc(10px + 2vmin);\n  color: rgb(39, 39, 39);\n  padding: 1em;\n`\n\nconst StyledHeader = styled.header`\n  font-size: 2em;\n  margin-bottom: 0.25em;\n  text-align: center;\n`\n\nfunction App() {\n  return (\n    <StyledApp>\n      <StyledHeader>\n        Covid Chart\n      </StyledHeader>\n      <ChartBlock chartHeight={800} />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}